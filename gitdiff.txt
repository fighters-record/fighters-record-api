diff --git a/Gemfile b/Gemfile
index bf313a9..3fa0dbb 100644
--- a/Gemfile
+++ b/Gemfile
@@ -38,6 +38,8 @@ gem 'bootsnap', require: false
 group :development, :test do
   # See https://guides.rubyonrails.org/debugging_rails_applications.html#debugging-with-the-debug-gem
   gem 'debug', platforms: %i[mri windows]
+  gem 'factory_bot_rails'
+  gem 'rspec-rails', '~> 7.1'
 end
 
 group :development do
@@ -46,5 +48,3 @@ group :development do
   gem 'rubocop', require: false
   gem 'rubocop-rails', require: false
 end
-
-gem 'rspec-rails', '~> 7.1', groups: %i[development test]
diff --git a/Gemfile.lock b/Gemfile.lock
index cea180a..d46944e 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -95,6 +95,11 @@ GEM
     diff-lcs (1.6.1)
     drb (2.2.1)
     erubi (1.13.1)
+    factory_bot (6.5.1)
+      activesupport (>= 6.1.0)
+    factory_bot_rails (6.4.4)
+      factory_bot (~> 6.5)
+      railties (>= 5.0.0)
     globalid (1.2.1)
       activesupport (>= 6.1)
     i18n (1.14.7)
@@ -254,6 +259,7 @@ PLATFORMS
 DEPENDENCIES
   bootsnap
   debug
+  factory_bot_rails
   pg (~> 1.1)
   puma (>= 5.0)
   rails (~> 7.1.5, >= 7.1.5.1)
diff --git a/config/database.yml b/config/database.yml
index ff9b9a9..d26e94c 100644
--- a/config/database.yml
+++ b/config/database.yml
@@ -15,13 +15,16 @@
 default: &default
   adapter: postgresql
   encoding: unicode
+  host: db
+  username: postgres
+  password: password
   # For details on connection pooling, see Rails configuration guide
   # https://guides.rubyonrails.org/configuring.html#database-pooling
   pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
 
 development:
   <<: *default
-  database: app_development
+  database: fighters_record_api_development
 
   # The specified database role being used to connect to PostgreSQL.
   # To create additional roles in PostgreSQL see `$ createuser --help`.
@@ -35,7 +38,6 @@ development:
   # Connect on a TCP socket. Omitted by default since the client uses a
   # domain socket that doesn't need configuration. Windows does not have
   # domain sockets, so uncomment these lines.
-  #host: localhost
 
   # The TCP port the server listens on. Defaults to 5432.
   # If your server runs on a different port number, change accordingly.
@@ -55,7 +57,7 @@ development:
 # Do not set this db to the same as development or production.
 test:
   <<: *default
-  database: app_test
+  database: fighters_record_api_test
 
 # As with config/credentials.yml, you never want to store sensitive information,
 # like your database password, in your source code. If your source code is
@@ -79,6 +81,6 @@ test:
 #
 production:
   <<: *default
-  database: app_production
+  database: fighters_record_api_production
   username: app
   password: <%= ENV["APP_DATABASE_PASSWORD"] %>
diff --git a/docker-compose.yml b/docker-compose.yml
index cc019fc..2b19dc7 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -19,7 +19,7 @@ services:
     volumes:
       - .:/app
     environment:
-      - DATABASE_URL=postgresql://postgres:password@db:5432/postgres
+      - DATABASE_URL=postgresql://postgres:password@db:5432/fighters_record_api_development
       - RAILS_ENV=development
       - NODE_ENV=development
     depends_on:
diff --git a/docs/SETUP.md b/docs/SETUP.md
index 37d7081..a9a4031 100644
--- a/docs/SETUP.md
+++ b/docs/SETUP.md
@@ -47,34 +47,10 @@ docker compose -f docker-compose.prod.yml up --build
 コンテナが起動したら、以下を実行してDBを初期化します。
 
 ```bash
-make db-create
-make db-migrate
-```
-
-または手動で：
-
-```bash
-docker compose exec api rails db:create
-docker compose exec api rails db:migrate
-```
+make db-setup
 
 ---
 
-### 4. Makefile活用（便利コマンド集）
-
-| コマンド | 内容 |
-|:--|:--|
-| `make up` | docker compose up |
-| `make down` | docker compose down |
-| `make build` | docker compose build |
-| `make prod-up` | 本番ビルド＆起動 |
-| `make bash` | コンテナに入る |
-| `make db-create` | データベース作成 |
-| `make db-migrate` | マイグレーション実行 |
-| `make console` | Railsコンソールを起動 |
-| `make logs` | コンテナのログを見る |
-
----
 
 ## 🛠 注意事項
 
diff --git a/makefile b/makefile
index b3f5255..de2e778 100644
--- a/makefile
+++ b/makefile
@@ -1,33 +1,34 @@
 # Makefile for fighters-record-api
 
-up:
+# docker起動
+docker-up:
 	docker compose up
 
-upd:
+# dockerデーモン起動
+docker-upd:
 	docker compose up -d
 
-down:
-	docker compose down
+# 停止＋削除（volumesは残す）
+docker-down:
+	docker-compose down
 
-build:
+# 停止＋volumesも含めて完全削除（DBなど初期化）
+docker-nuke:
+	docker-compose down -v
+
+docker-build:
 	docker compose build --no-cache
 
-prod-up:
+docker-prod-up:
 	docker compose -f docker-compose.prod.yml up --build
 
-bash:
+docker-bash:
 	docker compose exec api bash
 
-db-create:
-	docker compose exec api rails db:create
-
-db-migrate:
-	docker compose exec api rails db:migrate
-
-console:
+docker-console:
 	docker compose exec api rails c
 
-logs:
+docker-logs:
 	docker compose logs -f api
 
 lint:
@@ -37,7 +38,34 @@ lint-fix:
 	bundle exec rubocop -A
 
 rspec:
-	bundle exec rspec
+	bin/rails db:environment:set RAILS_ENV=development
+	bundle exec rspec 
+
+# DBセットアップ
+db-setup: 
+	make db-create
+	make db-migrate
+
+# DB作成（development/test）
+db-create:
+	docker compose exec api rails db:create
+	docker compose exec api rails db:create RAILS_ENV=test
+
+# マイグレーション実行（development/test）
+db-migrate:
+	docker compose exec api rails db:migrate
+	docker compose exec api rails db:migrate RAILS_ENV=test
+
+# DBリセット（データ削除＋マイグレーション再実行）
+db-reset:
+	docker compose exec api rails db:drop RAILS_ENV=development
+	docker compose exec api rails db:create RAILS_ENV=development
+	docker compose exec api rails db:migrate RAILS_ENV=development
+
+# テスト用DBをschemaからセットアップ
+db-test-prepare:
+	docker compose exec api rails db:create RAILS_ENV=test
+	docker compose exec api rails db:schema:load RAILS_ENV=test
 
 # TODO: 将来的にやるよ
 # lint-ci:
diff --git a/spec/rails_helper.rb b/spec/rails_helper.rb
index 2fb3cef..926a129 100644
--- a/spec/rails_helper.rb
+++ b/spec/rails_helper.rb
@@ -72,4 +72,5 @@ RSpec.configure do |config|
  
   # type: :request に限定してヘルパー有効化
   config.include RequestHelper, type: :request
+  config.include FactoryBot::Syntax::Methods
 end
